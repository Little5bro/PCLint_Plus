meta:
    # The version of this compiler database
    version: "1.0"

    # The version that this database is backwards compatible with
    version_compat: "1.0"

compilers:
    gcc: &gcc
        description: "GNU C/C++ compiler (all targets)"
        version:
            # When the compiler version is requested, the compiler will be invoked with the
            # arguments in 'command' and the portion of the output written to 'stderr' that
            # matches the 'version' portion of the regular expression provided to 'match_expr'
            # will be returned.
            command:
                - "-v"
            channel:    stderr
            match_expr:
                'version\s+(?P<version>\d+\.\d+\.\d+)'
        c_include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-v"
                - "-xc"
                - "-E"
                - "-"
            channel:    stderr
            input: ""
            match_expr: 'search starts here:[\r\n]+(?:\s*(?P<include_dir>[^#\r\n]*[\r\n]+)*)End of search list'
        cpp_include_paths:
            # Same as above but for C++.
            command:
                - "-v"
                - "-xc++"
                - "-E"
                - "-"
            channel:    stderr
            input: ""
            match_expr: 'search starts here:[\r\n]+(?:\s*(?P<include_dir>[^#\r\n]*[\r\n]+)*)End of search list'
        c_macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-dM"
                - "-E"
                - "-xc"
                - "-"
            channel:    stdout
            match_expr: '(?P<macros>.*)'
            input: ""
            scavenge_command:
                - "-E"
                - "-xc"
                - "-"
        cpp_macros:
            # Same as above but for C++.
            command:
                - "-dM"
                - "-E"
                - "-xc++"
                - "-"
            channel:    stdout
            input: ""
            match_expr: '(?P<macros>.*)'
            scavenge_command:
                - "-E"
                - "-xc++"
                - "-"
        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "-E"
                - "-xc"
                - "-"
            input: |
                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #if __SIZEOF_SIZE_T__ == __SIZEOF_LONG_LONG__
                #  define FZL_OPT +fzl ++fzl
                #elif __SIZEOF_SIZE_T__ == __SIZEOF_LONG__
                #  define FZL_OPT +fzl
                #else
                #  define FZL_OPT
                #endif

                #pragma message(STR( \
                                      JOIN(-si, __SIZEOF_INT__) \
                                      JOIN(-sl, __SIZEOF_LONG__) \
                                      JOIN(-sll,__SIZEOF_LONG_LONG__) \
                                      JOIN(-ss, __SIZEOF_SHORT__) \
                                      JOIN(-sw, __SIZEOF_WCHAR_T__) \
                                      JOIN(-sp, __SIZEOF_POINTER__) \
                                      JOIN(-sf, __SIZEOF_FLOAT__) \
                                      JOIN(-sd, __SIZEOF_DOUBLE__) \
                                      JOIN(-sld,__SIZEOF_LONG_DOUBLE__) \
                                      FZL_OPT \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
        base_config:
            extensions:
                - ['+fdi', 'Starts its #include search in the directory of the including file']
                - ['+fgi', 'Enable GNU inline semantics']
                - ['+fld', 'Enable support for gcc label designators']
                - ['+ppw(include_next)', 'Enable support for #include_next']
                - ['+ppw(ident)', 'Enable support for #ident']
                - ['+ppw(warning)', 'Enable support for #warning']
                - ['+ppw(import)', 'Enable support for #import']
                - ['+ppw(sccs)', 'Enable support for #sccs']
                - ['+ppw(unassert)', 'Enable support for #unassert']
                - ['+cpp(.cc)', 'Make .cc a C++ file extension in addition to the default of .cpp and .cxx']
                - ['+rw(__typeof__)', '']
                - ['+rw(_Decimal32)', '']
                - ['+rw(_Decimal64)', '']
                - ['+rw(_Decimal128)', '']
                - ['+rw(__alignof)', '']
                - ['+rw(__attribute)', '']
                - ['+rw(__builtin_choose_expr)', '']
                - ['+rw(__builtin_offsetof)', '']
                - ['+rw(__builtin_types_compatible_p)', '']
                - ['+rw(__builtin_va_arg)', '']
                - ['+rw(__extension__)', '']
                - ['+rw(__imag)', '']
                - ['+rw(__label__)', '']
                - ['+rw(__real)', '']
                - ['+rw(__thread)', '']
                - ['+rw(__PRETTY_FUNCTION__)', '']
                - ['+rw(typeof)', '']
                - ['-rw_asgn(__inline,inline)', '']
                - ['-rw_asgn(__inline__,inline)', '']
                - ['-rw_asgn(__signed__,signed)', '']
                - ['-rw_asgn(__signed,signed)', '']
                - ['-rw_asgn(__volatile__,volatile)', '']
                - ['-rw_asgn(__volatile,volatile)', '']
                - ['-rw_asgn(__alignof__,__alignof)', '']
                - ['-rw_asgn(__const,const)', '']
                - ['-rw_asgn(asm,_up_to_brackets)', '']
                - ['-rw_asgn(__asm,_up_to_brackets)', '']
                - ['-rw_asgn(__asm__,_up_to_brackets)', '']
            suppressions:
                - ['-emacro(530, va_start)', '']
                - ['-emacro(530, va_end)', '']
                - ['-emacro(413, offsetof)', '']
        options:
            # The list of options used by the compiler.
            #
            # The 'handled' options are those that have corresponding Lint options and instructions
            # on how to convert the compiler option to the appropriate lint option.
            #
            # The 'ignored' options are options that the configuration tool is aware of and explicitly
            # ignores because they are not relevant to the linting process.
            #
            # The 'unsupported' options include those that could potentially have an effect on the
            # linting process if they were supported but are currently ignored because the corresponding
            # behavior is not implemented in Lint.
            #
            # Options that are encountered that are not found in these three areas are considered to be
            # 'unknown' to the configuration tool and will be logged for possibile investigation.
            # It is important that options be placed in the correct section because the section in which
            # they are found dictates how information about the option will be communicated to the user.
            '-ansi':
                transform: '-std=c90'
            '-std=c89': 
                transform: '-std=c89'
            '-std=c90':
                transform: '-std=c90'
            '-std=c99':
                transform: '-std=c99'
            '-std=c11':
                transform: '-std=c11'
            '-std=c9x':
                transform: '-std=c99'
            '-std=c1x':
                transform: '-std=c11'
            '-std=iso9899:1990':
                transform: '-std=c90'
            '-std=iso9899:199409':
                transform: '-std=c90'
            '-std=iso9899:1999':
                transform: '-std=c99'
            '-std=iso9899:199x':
                transform: '-std=c99'
            '-std=c++03':
                transform: '-std=c++03'
            '-std=c++11':
                transform: '-std=c++11'
            '-std=c++14':
                transform: '-std=c++14'
            '-std=c++17':
                transform: '-std=c++17'
            '-std=c++0x':
                transform: '-std=c++11'
            '-std=c++1y':
                transform: '-std=c++14'
            '-std=c++1z':
                transform: '-std=c++17'
            '-std=gnu89':
                transform: '-std=c89'
            '-std=gnu90':
                transform: '-std=c90'
            '-std=gnu99':
                transform: '-std=c99'
            '-std=gnu9x':
                transform: '-std=c99'
            '-std=gnu11':
                transform: '-std=c11'
            '-std=gnu1x':
                transform: '-std=c11'
            '-std=gnu++98':
                transform: '-std=c++03'
            '-std=gnu++03':
                transform: '-std=c++03'
            '-std=gnu++11':
                transform: '-std=c++11'
            '-std=gnu++0x':
                transform: '-std=c++11'
            '-std=gnu++14':
                transform: '-std=c++14'
            '-std=gnu++1y':
                transform: '-std=c++14'
            '-std=gnu++17':
                transform: '-std=c++17'
            '-std=gnu++1z':
                transform: '-std=c++17'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-U':
                transforms: [ ['-U\s*(?P<macro_name>.+)', '-u\g<macro_name>'] ]
            '-fgnu89-inline':
                transform: '+fgi -d__GNUC_GNU_INLINE__'
            '-fno-gnu89-inline':
                transform: '-fgi -d__GNUC_STDC_INLINE__'
            '-fno-asm':
                transform: '-rw(typeof)'
            '-fno-gnu-keywords':
                transform: '-rw(typeof)'
            '-fgimple':
                transform: '+rw(__GIMPLE)'
            '-fms-extensions':
                transform: '+fms'
            '-fplan9-extensions':
                transform: '+fms'
            '-funsigned-char':
                transform: '+fcu'
            '-fsigned-char':
                transform: '-fcu'
            '-fno-unsigned-char':
                transform: '-fcu'
            '-fno-signed-char':
                transform: '+fcu'
            '-ffor-scope':
                transform: '+ffb'
            '-fno-for-scope':
                transform: '-ffb'
            '-fno-operator-names':
                transform: '-fon'
            '-ftemplate-depth':
                transforms: [ ['-ftemplate-depth=(?P<depth>\d+)', '-tr_limit=\g<depth>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)', '-i"\g<dir>"'] ]
            '-B':
                transforms: [ ['-B(?P<prefix>.+)', '-i"\g<prefix>/include"'] ]
            '-include':
                transforms: [ ['-include (?P<file>.+)', '-header(\g<file>)'] ]
            '-imacros':
                transforms: [ ['-imacros (?P<file>.+)', '-header(\g<file>)'] ]
            '-fdollars-in-identifiers':
                transform: '-$'
            '-trigraphs':
                transform: '+ftg'
            '-Wctor-dtor-privacy':
                transform: ''
            '-Wdelete-non-virtual-dtor':
                transform: ''
            '-Wliteral-suffix':
                transform: ''
            '-Wnarrowing':
                transform: ''
            '-Wnoexcept':
                transform: ''
            '-Wnon-virtual-dtor':
                transform: ''
            '-Wregister':
                transform: ''
            '-Wreorder':
                transform: ''
            '-Wold-style-cast':
                transform: ''
            '-Woverloaded-virtual':
                transform: ''
            '-Wno-pmf-conversions':
                transform: ''
            '-Wsign-promo':
                transform: ''
            '-Wtemplates':
                transform: ''
            '-Wmultiple-inheritance':
                transform: ''
            '-Wvirtual-inheritance':
                transform: ''
            '-Wnamespaces':
                transform: ''
            '-Wno-terminate':
                transform: ''

            '-fcond-mismatch':  null
            '-flax-vector-conversions': null
            '-fsigned-bitfields': null
            '-funsigned-bitfields': null
            '-fno-signed-bitfields': null
            '-fno-unsigned-bitfields': null
            '-fno-access-control' : null
            '-faligned-new': null
            '-fconstexpr-depth' : null
            '-fconstexpr-loop-limit' : null
            '-fdeduce-init-list': null
            '-ffriend-injection': null
            '-fnew-inheriting-ctors': null
            '-fnew-ttp-matching': null
            '-fsized-deallocation' : null
            '-fstrong-eval-order': null
            '-fext-numeric-literals': null
            '-Weffc++': null
            '-Wstrict-null-sentinel': null
            '-Wno-non-template-friend': null
            '-I-': null
            '-iquote': null
            '-isystem': null
            '-idirafter': null
            '-iprefix': null
            '-iwithprefix': null
            '-iwithprefixbefore': null
            '-iwithprefixbefore': null
            '-isysroot': null
            '-imultilib': null
            '-fpreprocessed': null
            '-fdirectives-only': null
            '-fpermitted-flt-eval-methods': null
            '-fno-builtin': null
            '-fhosted': null
            '-ffreestanding': null
            '-fopenacc': null
            '-fopenacc-dim': null
            '-fopenmp': null
            '-fopenmp-simd': null
            '-fcilkplus': null
            '-fgnu-tm': null
            '-fsso-struct': null
            '-fabi-version': null
            '-fabi-compat-version': null
            '-fcheck-new': null
            '-fconcepts': null
            '-fno-elide-constructors': null
            '-fno-enforce-eh-specs': null
            '-fextern-tls-init': null
            '-fno-extern-tls-init': null
            '-fno-implicit-templates': null
            '-fno-implicit-inline-templates': null
            '-fno-implement-inlines': null
            '-fno-nonansi-builtins': null
            '-fnothrow-opt': null
            '-fno-optional-diags': null
            '-fpermissive': null
            '-fno-pretty-templates': null
            '-frepo': null
            '-fno-rtti': null
            '-fstrict-enums': null
            '-ftemplate-backtrace-limit': null
            '-fno-threadsafe-statics': null
            '-fuse-cxa-atexit': null
            '-fno-use-cxa-get-exception-ptr': null
            '-fvisibility-inlines-hidden': null
            '-fvisibility-ms-compat': null
            '-fno-weak': null
            '-nostdinc++': null
            '-Wabi-tag': null
            '-Wlto-type-mismatch': null
            '-fmessage-length': null
            '-fdiagnostics-show-location': null
            '-fdiagnostics-color': null
            '-fno-diagnostics-show-option': null
            '-fno-diagnostics-show-caret': null
            '-fdiagnostics-parseable-fixits': null
            '-fdiagnostics-generate-patch': null
            '-fno-show-column': null
            '-fextended-identifiers': null
            '-fno-canonical-system-headers': null
            '-ftabstop': null
            '-fdelayed-template-parsing':
                transform: '+fdt'
            '-fbracket-depth': null
            '-fconstexpr-depth': null
            '-ftemplate-depth': null
            '-foperator-arrow-depth': null
            '-m': null
        
    clang: &clang
        <<: *gcc
        description: "Compiler frontend for LLVM"

    vs_base: &vs_base
        version:
            command: []
            channel:    stderr
            match_expr:
                'Version\s+(?P<version>\d+\.\d+\.\d+)'
        include_paths:
            env_var: 'INCLUDE'
            match_expr: '(?:(?P<include_dir>[^;]+);?)+'
        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via a temporary file.
            command: 
                - '-Tp'
            tempfile: |
                template <int T>
                class si;

                template <int T>
                class sl;

                template <int T>
                class sll;

                template <int T>
                class ss;

                template <int T>
                class sw;

                template <int T>
                class sp;

                template <int T>
                class sf;

                template <int T>
                class sd;

                template <int T>
                class sld;

                int main(void) {
                    si<sizeof(int)> x1;
                    sl<sizeof(long)> x2;
                    sll<sizeof(long long)> x3;
                    ss<sizeof(short)> x4;
                    sw<sizeof(wchar_t)> x5;
                    sp<sizeof(void *)> x6;
                    sf<sizeof(float)> x7;
                    sd<sizeof(double)> x8;
                    sld<sizeof(long double)> x9;
                }
            channel:    stdout
            match_expr: '(?:.*?(?P<size_name>si|sl|sll|ss|sw|sp|sf|sd|sld)<(?P<size_value>\d+)>)+'

        options:
            '/D':
                transforms: [ ['/D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '++fbe -d\g<macro_name>{"\g<macro_def>"} --fbe'], ['/D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
                pre_transforms_replacements: [ [ '\', '\\' ], [ '"', '\"' ] ]
            '/EH':
                transform: '-d_CPPUNWIND=1'
            '/GR':
                transform: '-d_CPPRTTI=1'
            '/GX':
                transform: '-d_CPPUNWIND=1'
            '/I':
                transforms: [ ['/I\s*(?P<dir>.+)', '-i"\g<dir>"'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)', '-i"\g<dir>"'] ]
            '/J':
                transform: '+fcu -d_CHAR_UNSIGNED -d_ATL_ALLOW_CHAR_UNSIGNED'
            '/LD':
                transforms: [ ['/LDd', '-d_DEBUG=1'] ]
            '/MD':
                transforms: [ ['/MDd', '-d_DEBUG=1'], ['/MDd?$', '-d_DLL=1'], ['/MD$', '-d_MT=1'], ['/MDd', '-d_MT=1'] ]
            '/MT':
                transforms: [ ['/MTd', '-d_DEBUG=1'], ['/MT$', '-d_MT=1'], ['/MTd', '-d_MT=1'] ]
            '/U':
                transforms: [ ['/U\s*(?P<macro_name>.+)', '-u\g<macro_name>'] ]
            '/Zc:forScope':
                transform: '+ffb'
            '/Zc:forScope-':
                transform: '-ffb'
            '/Zc:trigraphs':
                transform: '+ftg'
            '/Zc:trigraphs-':
                transform: '-ftg'
            '/Zc:strictStrings':
                transform: '+fsc'
            '/Zc:strictStrings-':
                transform: '-fsc'
            '/ZW':
                transform: '-d__cplusplus_winrt=201009'
            '/Tc': null
            '/Tp': null
            '/TC': null
            '/TP': null
            '/openmp':
                transform: '-d_OPENMP=200203'
            '/X': null
            '/Zc:sizedDealloc': null
            '/Zc:sizedDealloc-': null
            '/Zc:implicitNoexcept-': null
            '/Zc:rvalueCast-': null
            '/Zc:auto-': null
            '/Zc:wchar_t-':
                transform: '-u_NATIVE_WCHAR_T_DEFINED -u_WCHAR_T_DEFINED'
            '/Zc:inline': null
            '/Zc:inline-': null
            '/clr':
                transforms: [ ['/clr$', '-d__cplusplus_cli=200406'], ['/clr$', '-d_CPPUNWIND=1'], ['/clr', '-d_M_CEE=001'], ['/clr:pure', '-d_M_CEE_PURE=001'], ['/clr:safe', '-d_M_CEE_SAFE=001'], ['/clr', '-d_MANAGED=1'] ]
            '/clr:pure':
                transform: '-d__cplusplus_cli=200406'
            '/clr:safe':
                transform: '-d__cplusplus_cli=200406'
            '/fp':
                transforms: [ ['/fp:except', '-d_M_FP_EXCEPT=1'], ['/fp:strict', '-d_M_FP_EXCEPT=1'], ['/fp:fast', '-d_M_FP_FAST=1'], ['/fp:precise', '-d_M_FP_PRECISE=1'], ['/fp:strict', '-d_M_FP_STRICT=1']]
            '/kernel':
                transform: '-d_KERNEL_MODE=1'
            '/u': null
            '/volatile:iso':
                transform: '-d_ISO_VOLATILE=1'

    vs2017:
        <<: *vs_base
        description: "Visual Studio 2017"
        macros:
            definitions:
                - ['_INTEGRAL_MAX_BITS', '64']
                - ['_WIN32', '1']
                - ['_MSC_FULL_VER', '190000000']
                - ['_MSC_VER', '1900']
                - ['_MSC_EXTENSIONS', '1']
                - ['_NATIVE_WCHAR_T_DEFINED', '1']
                - ['_WCHAR_T_DEFINED', '1']
                - ['__FUNCTION__', '"func"']
                - ['__FUNCDNAME__', '"funcname"']
                - ['__FUNCSIG__', '"funcsig"']
                - ['L__FUNCTION__', 'L"func"']
                - ['_M_IX86', '600']
        c_decls:
            definitions:
                - 'void __assert(_Bool);  /*lint !e793 !e955 !e970 !e1904 !e9141 */'
        cpp_decls:
            definitions:
                - 'void __assert(bool);  /*lint !e793 !e955 !e970 !e1904 !e9141 */'
        base_config:
            extensions:
                - ['-std=c++14', 'Enable C++14 support']
                - ['-$', 'Enable $ as an identifier character']
                - ['+fan', 'Enable support for anonymous unions']
                - ['+fdi', 'Search including directory']
                - ['+fsi', 'Search include stack for headers']
                - ['+frc', 'Enable MSVC behavior with regards to handling of commas in macro expansions involving __VA_ARGS__']
                - ['+fbl', 'Search dependent base classes for unqualified lookup in a class template']
                - ['+fei', 'Enumerations are always int']
                - ['+fur', 'Allow unions to contain reference members']
                - ['+frd', 'Allow redefinition of default parameters for member functions of a class template']
                - ['+fum', 'A user-declared move operation will only delete the corresponding copy operation']
                - ['+ffv', 'Implicit conversion from function pointers to void pointers']
                - ['+flp', 'Support the C++98 definition of null pointer constant']
                - ['+fnf', 'Fall back on operator new when operator new[] cannot be found']
                - ['+fes', 'Search enclosing scopes for friend tag declarations']
                - ['+ffw', 'A friend declaration may act as a forward declaration']
                - ['+fma', 'Microsoft Asm blocks']
                - ['+fdt', 'Enable delayed template parsing']
                - ['+fms', 'Other Microsoft extensions']
                - ['-fon', 'Disable alternative C++ tokens for logical operators']
                - ['+fwc', 'internal wchar_t']
                - ['+fwu', 'wchar_t is unsigned']
                - ['+ppw(using)', 'Enable support for the #using directive']
                - ['+ppw(import)', 'Enable support for the #import directive']
                - ['+rw(___identifier)', '']
                - ['+rw(__alignof)', '']
                - ['+rw(__asm)', '']
                - ['+rw(__builtin_alignof)', '']
                - ['+rw(__cdecl)', '']
                - ['+rw(__declspec)', '']
                - ['+rw(__fastcall)', '']
                - ['+rw(__finally)', '']
                - ['+rw(__forceinline)', '']
                - ['+rw(__gc)', '']
                - ['+rw(__if_exists)', '']
                - ['+rw(__if_not_exists)', '']
                - ['+rw(__inline)', '']
                - ['+rw(__int16)', '']
                - ['+rw(__int32)', '']
                - ['+rw(__int64)', '']
                - ['+rw(__int8)', '']
                - ['+rw(__interface)', '']
                - ['+rw(__is_destructible)', '']
                - ['+rw(__is_interface_class)', '']
                - ['+rw(__is_nothrow_destructible)', '']
                - ['+rw(__is_sealed)', '']
                - ['+rw(__leave)', '']
                - ['+rw(__multiple_inheritance)', '']
                - ['+rw(__nogc)', '']
                - ['+rw(__pin)', '']
                - ['+rw(__ptr64)', '']
                - ['+rw(__ptr32)', '']
                - ['+rw(__single_inheritance)', '']
                - ['+rw(__sptr)', '']
                - ['+rw(__stdcall)', '']
                - ['+rw(__super)', '']
                - ['+rw(__thiscall)', '']
                - ['+rw(__try)', '']
                - ['+rw(__try_cast)', '']
                - ['+rw(__uptr)', '']
                - ['+rw(__unaligned)', '']
                - ['+rw(__uuidof)', '']
                - ['+rw(__value)', '']
                - ['+rw(__vectorcall)', '']
                - ['+rw(__virtual_inheritance)', '']
                - ['+rw(__w64)', '']
                - ['+rw(__wchar_t)', '']
                - ['+rw(_asm)', '']
                - ['+rw(_alignof)', '']
                - ['+rw(_cdecl)', '']
                - ['+rw(_declspec)', '']
                - ['+rw(_fastcall)', '']
                - ['+rw(_inline)', '']
                - ['+rw(_int16)', '']
                - ['+rw(_int32)', '']
                - ['+rw(_int64)', '']
                - ['+rw(_int8)', '']
                - ['+rw(_stdcall)', '']
                - ['+rw(_thiscall)', '']
                - ['+rw(_uuidof)', '']
                - ['+rw(char16_t)', '']
                - ['+rw(char32_t)', '']
                - ['++doffsetof(s,m)=__builtin_offsetof(s,m)', '']
            suppressions:
                - ['-emacro(505 792 1773,va_start)', '']
                - ['-esym(4242,std::_Const_cast)', '']
                - ['-estring(9022,_identifier)', '']
                - ['-estring(9051 9052,_inline,_declspec,_stdcall)', '']
                - ['-emacro(413, offsetof)', '']
                - ['-e4374', 'Visual Studio allows certain calling convention differences in overridden functions']


    vs2017_64:
        <<: *vs_base
        description: "Visual Studio 2017 64-bit"
        macros:
            definitions:
                - ['_INTEGRAL_MAX_BITS', '64']
                - ['_WIN32', '1']
                - ['_WIN64', '1']
                - ['_M_X64', '1']
                - ['_M_AMD64', '100']
                - ['_MSC_FULL_VER', '190000000']
                - ['_MSC_VER', '1900']
                - ['_MSC_EXTENSIONS', '1']
                - ['_NATIVE_WCHAR_T_DEFINED', '1']
                - ['_WCHAR_T_DEFINED', '1']
                - ['__FUNCTION__', '"func"']
                - ['__FUNCDNAME__', '"funcname"']
                - ['__FUNCSIG__', '"funcsig"']
                - ['L__FUNCTION__', 'L"func"']
        c_decls:
            definitions:
                - 'void __assert(_Bool);  /*lint !e793 !e955 !e970 !e1904 !e9141 */'
        cpp_decls:
            definitions:
                - 'void __assert(bool);  /*lint !e793 !e955 !e970 !e1904 !e9141 */'
        base_config:
            extensions:
                - ['-std=c++14', 'Enable C++14 support']
                - ['-$', 'Enable $ as an identifier character']
                - ['+fan', 'Enable support for anonymous unions']
                - ['+fdi', 'Search including directory']
                - ['+fsi', 'Search include stack for headers']
                - ['+frc', 'Enable MSVC behavior with regards to handling of commas in macro expansions involving __VA_ARGS__']
                - ['+fbl', 'Search dependent base classes for unqualified lookup in a class template']
                - ['+fei', 'Enumerations are always int']
                - ['+fur', 'Allow unions to contain reference members']
                - ['+frd', 'Allow redefinition of default parameters for member functions of a class template']
                - ['+fum', 'A user-declared move operation will only delete the corresponding copy operation']
                - ['+ffv', 'Implicit conversion from function pointers to void pointers']
                - ['+flp', 'Support the C++98 definition of null pointer constant']
                - ['+fnf', 'Fall back on operator new when operator new[] cannot be found']
                - ['+fes', 'Search enclosing scopes for friend tag declarations']
                - ['+ffw', 'A friend declaration may act as a forward declaration']
                - ['+fma', 'Microsoft Asm blocks']
                - ['+fdt', 'Enable delayed template parsing']
                - ['+fms', 'Other Microsoft extensions']
                - ['-fon', 'Disable alternative C++ tokens for logical operators']
                - ['+fwc', 'internal wchar_t']
                - ['+fwu', 'wchar_t is unsigned']
                - ['+ppw(using)', 'Enable support for the #using directive']
                - ['+ppw(import)', 'Enable support for the #import directive']
                - ['+rw(___identifier)', '']
                - ['+rw(__alignof)', '']
                - ['+rw(__asm)', '']
                - ['+rw(__builtin_alignof)', '']
                - ['+rw(__cdecl)', '']
                - ['+rw(__declspec)', '']
                - ['+rw(__fastcall)', '']
                - ['+rw(__finally)', '']
                - ['+rw(__forceinline)', '']
                - ['+rw(__gc)', '']
                - ['+rw(__if_exists)', '']
                - ['+rw(__if_not_exists)', '']
                - ['+rw(__inline)', '']
                - ['+rw(__int16)', '']
                - ['+rw(__int32)', '']
                - ['+rw(__int64)', '']
                - ['+rw(__int8)', '']
                - ['+rw(__interface)', '']
                - ['+rw(__is_destructible)', '']
                - ['+rw(__is_interface_class)', '']
                - ['+rw(__is_nothrow_destructible)', '']
                - ['+rw(__is_sealed)', '']
                - ['+rw(__leave)', '']
                - ['+rw(__multiple_inheritance)', '']
                - ['+rw(__nogc)', '']
                - ['+rw(__pin)', '']
                - ['+rw(__ptr64)', '']
                - ['+rw(__ptr32)', '']
                - ['+rw(__single_inheritance)', '']
                - ['+rw(__sptr)', '']
                - ['+rw(__stdcall)', '']
                - ['+rw(__super)', '']
                - ['+rw(__thiscall)', '']
                - ['+rw(__try)', '']
                - ['+rw(__try_cast)', '']
                - ['+rw(__uptr)', '']
                - ['+rw(__unaligned)', '']
                - ['+rw(__uuidof)', '']
                - ['+rw(__value)', '']
                - ['+rw(__vectorcall)', '']
                - ['+rw(__virtual_inheritance)', '']
                - ['+rw(__w64)', '']
                - ['+rw(__wchar_t)', '']
                - ['+rw(_asm)', '']
                - ['+rw(_alignof)', '']
                - ['+rw(_cdecl)', '']
                - ['+rw(_declspec)', '']
                - ['+rw(_fastcall)', '']
                - ['+rw(_inline)', '']
                - ['+rw(_int16)', '']
                - ['+rw(_int32)', '']
                - ['+rw(_int64)', '']
                - ['+rw(_int8)', '']
                - ['+rw(_stdcall)', '']
                - ['+rw(_thiscall)', '']
                - ['+rw(_uuidof)', '']
                - ['+rw(char16_t)', '']
                - ['+rw(char32_t)', '']
                - ['+fzl', 'long sizeof']
                - ['++fzl', 'long long sizeof']
                - ['+d"_EMIT_VECTORCALL(...)="', '']
                - ['++doffsetof(s,m)=__builtin_offsetof(s,m)', '']
            suppressions:
                - ['-emacro(505 792 1773,va_start)', '']
                - ['-esym(4242,std::_Const_cast)', '']
                - ['-estring(9022,_identifier)', '']
                - ['-estring(9051 9052,_inline,_declspec,_stdcall)', '']
                - ['-emacro(413, offsetof)', '']
                - ['-e4374', 'Visual Studio allows certain calling convention differences in overridden functions']


    vs2015:
        <<: *vs_base
        description: "Visual Studio 2015"
        macros:
            definitions:
                - ['_INTEGRAL_MAX_BITS', '64']
                - ['_WIN32', '1']
                - ['_MSC_FULL_VER', '190000000']
                - ['_MSC_VER', '1900']
                - ['_MSC_EXTENSIONS', '1']
                - ['__FUNCTION__', '"func"']
                - ['__FUNCDNAME__', '"funcname"']
                - ['__FUNCSIG__', '"funcsig"']
                - ['L__FUNCTION__', 'L"func"']
                - ['_M_IX86', '600']
        c_decls:
            definitions:
                - 'void __assert(_Bool);  /*lint !e793 !e955 !e970 !e1904 !e9141 */'
        cpp_decls:
            definitions:
                - 'void __assert(bool);  /*lint !e793 !e955 !e970 !e1904 !e9141 */'
        base_config:
            extensions:
                - ['-std=c++14', 'Enable C++14 support']
                - ['-$', 'Enable $ as an identifier character']
                - ['+fan', 'Enable support for anonymous unions']
                - ['+fdi', 'Search including directory']
                - ['+fsi', 'Search include stack for headers']
                - ['+frc', 'Enable MSVC behavior with regards to handling of commas in macro expansions involving __VA_ARGS__']
                - ['+fbl', 'Search dependent base classes for unqualified lookup in a class template']
                - ['+fei', 'Enumerations are always int']
                - ['+fur', 'Allow unions to contain reference members']
                - ['+frd', 'Allow redefinition of default parameters for member functions of a class template']
                - ['+fum', 'A user-declared move operation will only delete the corresponding copy operation']
                - ['+ffv', 'Implicit conversion from function pointers to void pointers']
                - ['+flp', 'Support the C++98 definition of null pointer constant']
                - ['+fnf', 'Fall back on operator new when operator new[] cannot be found']
                - ['+fes', 'Search enclosing scopes for friend tag declarations']
                - ['+ffw', 'A friend declaration may act as a forward declaration']
                - ['+fma', 'Microsoft Asm blocks']
                - ['+fdt', 'Enable delayed template parsing']
                - ['+fms', 'Other Microsoft extensions']
                - ['-fon', 'Disable alternative C++ tokens for logical operators']
                - ['+fwc', 'internal wchar_t']
                - ['+fwu', 'wchar_t is unsigned']
                - ['+ppw(using)', 'Enable support for the #using directive']
                - ['+ppw(import)', 'Enable support for the #import directive']
                - ['+rw(___identifier)', '']
                - ['+rw(__alignof)', '']
                - ['+rw(__asm)', '']
                - ['+rw(__builtin_alignof)', '']
                - ['+rw(__cdecl)', '']
                - ['+rw(__declspec)', '']
                - ['+rw(__fastcall)', '']
                - ['+rw(__finally)', '']
                - ['+rw(__forceinline)', '']
                - ['+rw(__gc)', '']
                - ['+rw(__if_exists)', '']
                - ['+rw(__if_not_exists)', '']
                - ['+rw(__inline)', '']
                - ['+rw(__int16)', '']
                - ['+rw(__int32)', '']
                - ['+rw(__int64)', '']
                - ['+rw(__int8)', '']
                - ['+rw(__interface)', '']
                - ['+rw(__is_destructible)', '']
                - ['+rw(__is_interface_class)', '']
                - ['+rw(__is_nothrow_destructible)', '']
                - ['+rw(__is_sealed)', '']
                - ['+rw(__leave)', '']
                - ['+rw(__multiple_inheritance)', '']
                - ['+rw(__nogc)', '']
                - ['+rw(__pin)', '']
                - ['+rw(__ptr64)', '']
                - ['+rw(__ptr32)', '']
                - ['+rw(__single_inheritance)', '']
                - ['+rw(__sptr)', '']
                - ['+rw(__stdcall)', '']
                - ['+rw(__super)', '']
                - ['+rw(__thiscall)', '']
                - ['+rw(__try)', '']
                - ['+rw(__try_cast)', '']
                - ['+rw(__uptr)', '']
                - ['+rw(__unaligned)', '']
                - ['+rw(__uuidof)', '']
                - ['+rw(__value)', '']
                - ['+rw(__vectorcall)', '']
                - ['+rw(__virtual_inheritance)', '']
                - ['+rw(__w64)', '']
                - ['+rw(__wchar_t)', '']
                - ['+rw(_asm)', '']
                - ['+rw(_alignof)', '']
                - ['+rw(_cdecl)', '']
                - ['+rw(_declspec)', '']
                - ['+rw(_fastcall)', '']
                - ['+rw(_inline)', '']
                - ['+rw(_int16)', '']
                - ['+rw(_int32)', '']
                - ['+rw(_int64)', '']
                - ['+rw(_int8)', '']
                - ['+rw(_stdcall)', '']
                - ['+rw(_thiscall)', '']
                - ['+rw(_uuidof)', '']
                - ['+rw(char16_t)', '']
                - ['+rw(char32_t)', '']
                - ['++doffsetof(s,m)=__builtin_offsetof(s,m)', '']
            suppressions:
                - ['-emacro(505 792 1773,va_start)', '']
                - ['-esym(4242,std::_Const_cast)', '']
                - ['-estring(9022,_identifier)', '']
                - ['-estring(9051 9052,_inline,_declspec,_stdcall)', '']
                - ['-emacro(413, offsetof)', '']
                - ['-e4374', 'Visual Studio allows certain calling convention differences in overridden functions']


    vs2015_64:
        <<: *vs_base
        description: "Visual Studio 2015 64-bit"
        macros:
            definitions:
                - ['_INTEGRAL_MAX_BITS', '64']
                - ['_WIN32', '1']
                - ['_WIN64', '1']
                - ['_M_X64', '1']
                - ['_M_AMD64', '100']
                - ['_MSC_FULL_VER', '190000000']
                - ['_MSC_VER', '1900']
                - ['_MSC_EXTENSIONS', '1']
                - ['_NATIVE_WCHAR_T_DEFINED', '1']
                - ['_WCHAR_T_DEFINED', '1']
                - ['__FUNCTION__', '"func"']
                - ['__FUNCDNAME__', '"funcname"']
                - ['__FUNCSIG__', '"funcsig"']
                - ['L__FUNCTION__', 'L"func"']
        c_decls:
            definitions:
                - 'void __assert(_Bool);  /*lint !e793 !e955 !e970 !e1904 !e9141 */'
        cpp_decls:
            definitions:
                - 'void __assert(bool);  /*lint !e793 !e955 !e970 !e1904 !e9141 */'
        base_config:
            extensions:
                - ['-std=c++14', 'Enable C++14 support']
                - ['-$', 'Enable $ as an identifier character']
                - ['+fan', 'Enable support for anonymous unions']
                - ['+fdi', 'Search including directory']
                - ['+fsi', 'Search include stack for headers']
                - ['+frc', 'Enable MSVC behavior with regards to handling of commas in macro expansions involving __VA_ARGS__']
                - ['+fbl', 'Search dependent base classes for unqualified lookup in a class template']
                - ['+fei', 'Enumerations are always int']
                - ['+fur', 'Allow unions to contain reference members']
                - ['+frd', 'Allow redefinition of default parameters for member functions of a class template']
                - ['+fum', 'A user-declared move operation will only delete the corresponding copy operation']
                - ['+ffv', 'Implicit conversion from function pointers to void pointers']
                - ['+flp', 'Support the C++98 definition of null pointer constant']
                - ['+fnf', 'Fall back on operator new when operator new[] cannot be found']
                - ['+fes', 'Search enclosing scopes for friend tag declarations']
                - ['+ffw', 'A friend declaration may act as a forward declaration']
                - ['+fma', 'Microsoft Asm blocks']
                - ['+fdt', 'Enable delayed template parsing']
                - ['+fms', 'Other Microsoft extensions']
                - ['-fon', 'Disable alternative C++ tokens for logical operators']
                - ['+fwc', 'internal wchar_t']
                - ['+fwu', 'wchar_t is unsigned']
                - ['+ppw(using)', 'Enable support for the #using directive']
                - ['+ppw(import)', 'Enable support for the #import directive']
                - ['+rw(___identifier)', '']
                - ['+rw(__alignof)', '']
                - ['+rw(__asm)', '']
                - ['+rw(__builtin_alignof)', '']
                - ['+rw(__cdecl)', '']
                - ['+rw(__declspec)', '']
                - ['+rw(__fastcall)', '']
                - ['+rw(__finally)', '']
                - ['+rw(__forceinline)', '']
                - ['+rw(__gc)', '']
                - ['+rw(__if_exists)', '']
                - ['+rw(__if_not_exists)', '']
                - ['+rw(__inline)', '']
                - ['+rw(__int16)', '']
                - ['+rw(__int32)', '']
                - ['+rw(__int64)', '']
                - ['+rw(__int8)', '']
                - ['+rw(__interface)', '']
                - ['+rw(__is_destructible)', '']
                - ['+rw(__is_interface_class)', '']
                - ['+rw(__is_nothrow_destructible)', '']
                - ['+rw(__is_sealed)', '']
                - ['+rw(__leave)', '']
                - ['+rw(__multiple_inheritance)', '']
                - ['+rw(__nogc)', '']
                - ['+rw(__pin)', '']
                - ['+rw(__ptr64)', '']
                - ['+rw(__ptr32)', '']
                - ['+rw(__single_inheritance)', '']
                - ['+rw(__sptr)', '']
                - ['+rw(__stdcall)', '']
                - ['+rw(__super)', '']
                - ['+rw(__thiscall)', '']
                - ['+rw(__try)', '']
                - ['+rw(__try_cast)', '']
                - ['+rw(__uptr)', '']
                - ['+rw(__unaligned)', '']
                - ['+rw(__uuidof)', '']
                - ['+rw(__value)', '']
                - ['+rw(__vectorcall)', '']
                - ['+rw(__virtual_inheritance)', '']
                - ['+rw(__w64)', '']
                - ['+rw(__wchar_t)', '']
                - ['+rw(_asm)', '']
                - ['+rw(_alignof)', '']
                - ['+rw(_cdecl)', '']
                - ['+rw(_declspec)', '']
                - ['+rw(_fastcall)', '']
                - ['+rw(_inline)', '']
                - ['+rw(_int16)', '']
                - ['+rw(_int32)', '']
                - ['+rw(_int64)', '']
                - ['+rw(_int8)', '']
                - ['+rw(_stdcall)', '']
                - ['+rw(_thiscall)', '']
                - ['+rw(_uuidof)', '']
                - ['+rw(char16_t)', '']
                - ['+rw(char32_t)', '']
                - ['+fzl', 'long sizeof']
                - ['++fzl', 'long long sizeof']
                - ['+d"_EMIT_VECTORCALL(...)="', '']
                - ['++doffsetof(s,m)=__builtin_offsetof(s,m)', '']
            suppressions:
                - ['-emacro(505 792 1773,va_start)', '']
                - ['-esym(4242,std::_Const_cast)', '']
                - ['-estring(9022,_identifier)', '']
                - ['-estring(9051 9052,_inline,_declspec,_stdcall)', '']
                - ['-emacro(413, offsetof)', '']
                - ['-e4374', 'Visual Studio allows certain calling convention differences in overridden functions']

    vs2013:
        <<: *vs_base
        description: "Visual Studio 2013"
        macros:
            definitions:
                - ['_INTEGRAL_MAX_BITS', '64']
                - ['_WIN32', '1']
                - ['_MSC_FULL_VER', '180000000']
                - ['_MSC_VER', '1800']
                - ['_MSC_EXTENSIONS', '1']
                - ['__FUNCTION__', '"func"']
                - ['__FUNCDNAME__', '"funcname"']
                - ['__FUNCSIG__', '"funcsig"']
                - ['L__FUNCTION__', 'L"func"']
                - ['_M_IX86', '600']
        c_decls:
            definitions:
                - 'void __assert(_Bool);  /*lint !e793 !e955 !e970 !e1904 !e9141 */'
        cpp_decls:
            definitions:
                - 'void __assert(bool);  /*lint !e793 !e955 !e970 !e1904 !e9141 */'
        base_config:
            extensions:
                - ['-std=c++11', 'Enable C++11 support']
                - ['-$', 'Enable $ as an identifier character']
                - ['+fan', 'Enable support for anonymous unions']
                - ['+fdi', 'Search including directory']
                - ['+fsi', 'Search include stack for headers']
                - ['+frc', 'Enable MSVC behavior with regards to handling of commas in macro expansions involving __VA_ARGS__']
                - ['+fbl', 'Search dependent base classes for unqualified lookup in a class template']
                - ['+fei', 'Enumerations are always int']
                - ['+fur', 'Allow unions to contain reference members']
                - ['+frd', 'Allow redefinition of default parameters for member functions of a class template']
                - ['+fum', 'A user-declared move operation will only delete the corresponding copy operation']
                - ['+ffv', 'Implicit conversion from function pointers to void pointers']
                - ['+flp', 'Support the C++98 definition of null pointer constant']
                - ['+fnf', 'Fall back on operator new when operator new[] cannot be found']
                - ['+fes', 'Search enclosing scopes for friend tag declarations']
                - ['+ffw', 'A friend declaration may act as a forward declaration']
                - ['+fma', 'Microsoft Asm blocks']
                - ['+fdt', 'Enable delayed template parsing']
                - ['+fms', 'Other Microsoft extensions']
                - ['-fon', 'Disable alternative C++ tokens for logical operators']
                - ['+fwc', 'internal wchar_t']
                - ['+fwu', 'wchar_t is unsigned']
                - ['+ppw(using)', 'Enable support for the #using directive']
                - ['+ppw(import)', 'Enable support for the #import directive']
                - ['+rw(___identifier)', '']
                - ['+rw(__alignof)', '']
                - ['+rw(__asm)', '']
                - ['+rw(__builtin_alignof)', '']
                - ['+rw(__cdecl)', '']
                - ['+rw(__declspec)', '']
                - ['+rw(__fastcall)', '']
                - ['+rw(__finally)', '']
                - ['+rw(__forceinline)', '']
                - ['+rw(__gc)', '']
                - ['+rw(__if_exists)', '']
                - ['+rw(__if_not_exists)', '']
                - ['+rw(__inline)', '']
                - ['+rw(__int16)', '']
                - ['+rw(__int32)', '']
                - ['+rw(__int64)', '']
                - ['+rw(__int8)', '']
                - ['+rw(__interface)', '']
                - ['+rw(__is_destructible)', '']
                - ['+rw(__is_interface_class)', '']
                - ['+rw(__is_nothrow_destructible)', '']
                - ['+rw(__is_sealed)', '']
                - ['+rw(__leave)', '']
                - ['+rw(__multiple_inheritance)', '']
                - ['+rw(__nogc)', '']
                - ['+rw(__pin)', '']
                - ['+rw(__ptr64)', '']
                - ['+rw(__ptr32)', '']
                - ['+rw(__single_inheritance)', '']
                - ['+rw(__sptr)', '']
                - ['+rw(__stdcall)', '']
                - ['+rw(__super)', '']
                - ['+rw(__thiscall)', '']
                - ['+rw(__try)', '']
                - ['+rw(__try_cast)', '']
                - ['+rw(__uptr)', '']
                - ['+rw(__unaligned)', '']
                - ['+rw(__uuidof)', '']
                - ['+rw(__value)', '']
                - ['+rw(__vectorcall)', '']
                - ['+rw(__virtual_inheritance)', '']
                - ['+rw(__w64)', '']
                - ['+rw(__wchar_t)', '']
                - ['+rw(_asm)', '']
                - ['+rw(_alignof)', '']
                - ['+rw(_cdecl)', '']
                - ['+rw(_declspec)', '']
                - ['+rw(_fastcall)', '']
                - ['+rw(_inline)', '']
                - ['+rw(_int16)', '']
                - ['+rw(_int32)', '']
                - ['+rw(_int64)', '']
                - ['+rw(_int8)', '']
                - ['+rw(_stdcall)', '']
                - ['+rw(_thiscall)', '']
                - ['+rw(_uuidof)', '']
                - ['+rw(char16_t)', '']
                - ['+rw(char32_t)', '']
                - ['++doffsetof(s,m)=__builtin_offsetof(s,m)', '']
            suppressions:
                - ['-emacro(505 792 1773,va_start)', '']
                - ['-esym(4242,std::_Const_cast)', '']
                - ['-estring(9022,_identifier)', '']
                - ['-estring(9051 9052,_inline,_declspec,_stdcall)', '']
                - ['-emacro(413, offsetof)', '']
                - ['-e4374', 'Visual Studio allows certain calling convention differences in overridden functions']


    vs2013_64:
        <<: *vs_base
        description: "Visual Studio 2013 64-bit"
        macros:
            definitions:
                - ['_INTEGRAL_MAX_BITS', '64']
                - ['_WIN32', '1']
                - ['_WIN64', '1']
                - ['_M_X64', '1']
                - ['_M_AMD64', '100']
                - ['_MSC_FULL_VER', '180000000']
                - ['_MSC_VER', '1800']
                - ['_MSC_EXTENSIONS', '1']
                - ['_NATIVE_WCHAR_T_DEFINED', '1']
                - ['_WCHAR_T_DEFINED', '1']
                - ['__FUNCTION__', '"func"']
                - ['__FUNCDNAME__', '"funcname"']
                - ['__FUNCSIG__', '"funcsig"']
                - ['L__FUNCTION__', 'L"func"']
        c_decls:
            definitions:
                - 'void __assert(_Bool);  /*lint !e793 !e955 !e970 !e1904 !e9141 */'
        cpp_decls:
            definitions:
                - 'void __assert(bool);  /*lint !e793 !e955 !e970 !e1904 !e9141 */'
        base_config:
            extensions:
                - ['-std=c++11', 'Enable C++11 support']
                - ['-$', 'Enable $ as an identifier character']
                - ['+fan', 'Enable support for anonymous unions']
                - ['+fdi', 'Search including directory']
                - ['+fsi', 'Search include stack for headers']
                - ['+frc', 'Enable MSVC behavior with regards to handling of commas in macro expansions involving __VA_ARGS__']
                - ['+fbl', 'Search dependent base classes for unqualified lookup in a class template']
                - ['+fei', 'Enumerations are always int']
                - ['+fur', 'Allow unions to contain reference members']
                - ['+frd', 'Allow redefinition of default parameters for member functions of a class template']
                - ['+fum', 'A user-declared move operation will only delete the corresponding copy operation']
                - ['+ffv', 'Implicit conversion from function pointers to void pointers']
                - ['+flp', 'Support the C++98 definition of null pointer constant']
                - ['+fnf', 'Fall back on operator new when operator new[] cannot be found']
                - ['+fes', 'Search enclosing scopes for friend tag declarations']
                - ['+ffw', 'A friend declaration may act as a forward declaration']
                - ['+fma', 'Microsoft Asm blocks']
                - ['+fdt', 'Enable delayed template parsing']
                - ['+fms', 'Other Microsoft extensions']
                - ['-fon', 'Disable alternative C++ tokens for logical operators']
                - ['+fwc', 'internal wchar_t']
                - ['+fwu', 'wchar_t is unsigned']
                - ['+fzl', 'long sizeof']
                - ['++fzl', 'long long sizeof']
                - ['+ppw(using)', 'Enable support for the #using directive']
                - ['+ppw(import)', 'Enable support for the #import directive']
                - ['+rw(___identifier)', '']
                - ['+rw(__alignof)', '']
                - ['+rw(__asm)', '']
                - ['+rw(__builtin_alignof)', '']
                - ['+rw(__cdecl)', '']
                - ['+rw(__declspec)', '']
                - ['+rw(__fastcall)', '']
                - ['+rw(__finally)', '']
                - ['+rw(__forceinline)', '']
                - ['+rw(__gc)', '']
                - ['+rw(__if_exists)', '']
                - ['+rw(__if_not_exists)', '']
                - ['+rw(__inline)', '']
                - ['+rw(__int16)', '']
                - ['+rw(__int32)', '']
                - ['+rw(__int64)', '']
                - ['+rw(__int8)', '']
                - ['+rw(__interface)', '']
                - ['+rw(__is_destructible)', '']
                - ['+rw(__is_interface_class)', '']
                - ['+rw(__is_nothrow_destructible)', '']
                - ['+rw(__is_sealed)', '']
                - ['+rw(__leave)', '']
                - ['+rw(__multiple_inheritance)', '']
                - ['+rw(__nogc)', '']
                - ['+rw(__pin)', '']
                - ['+rw(__ptr64)', '']
                - ['+rw(__ptr32)', '']
                - ['+rw(__single_inheritance)', '']
                - ['+rw(__sptr)', '']
                - ['+rw(__stdcall)', '']
                - ['+rw(__super)', '']
                - ['+rw(__thiscall)', '']
                - ['+rw(__try)', '']
                - ['+rw(__try_cast)', '']
                - ['+rw(__uptr)', '']
                - ['+rw(__unaligned)', '']
                - ['+rw(__uuidof)', '']
                - ['+rw(__value)', '']
                - ['+rw(__vectorcall)', '']
                - ['+rw(__virtual_inheritance)', '']
                - ['+rw(__w64)', '']
                - ['+rw(__wchar_t)', '']
                - ['+rw(_asm)', '']
                - ['+rw(_alignof)', '']
                - ['+rw(_cdecl)', '']
                - ['+rw(_declspec)', '']
                - ['+rw(_fastcall)', '']
                - ['+rw(_inline)', '']
                - ['+rw(_int16)', '']
                - ['+rw(_int32)', '']
                - ['+rw(_int64)', '']
                - ['+rw(_int8)', '']
                - ['+rw(_stdcall)', '']
                - ['+rw(_thiscall)', '']
                - ['+rw(_uuidof)', '']
                - ['+rw(char16_t)', '']
                - ['+rw(char32_t)', '']
                - ['+d"_EMIT_VECTORCALL(...)="', '']
                - ['++doffsetof(s,m)=__builtin_offsetof(s,m)', '']
            suppressions:
                - ['-emacro(505 792 1773,va_start)', '']
                - ['-esym(4242,std::_Const_cast)', '']
                - ['-estring(9022,_identifier)', '']
                - ['-estring(9051 9052,_inline,_declspec,_stdcall)', '']
                - ['-emacro(413, offsetof)', '']
                - ['-e4374', 'Visual Studio allows certain calling convention differences in overridden functions']

    vs2012:
        <<: *vs_base
        description: "Visual Studio 2012"

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via a temporary file.
            command: 
                - '-Tp'
            tempfile: |
                template <int si>
                class si;

                template <int sl>
                class sl;

                template <int sll>
                class sll;

                template <int ss>
                class ss;

                template <int sw>
                class sw;

                template <int sp>
                class sp;

                template <int sf>
                class sf;

                template <int sd>
                class sd;

                template <int sld>
                class sld;

                int main(void) {
                    si<sizeof(int)> x1;
                    sl<sizeof(long)> x2;
                    sll<sizeof(long long)> x3;
                    ss<sizeof(short)> x4;
                    sw<sizeof(wchar_t)> x5;
                    sp<sizeof(void *)> x6;
                    sf<sizeof(float)> x7;
                    sd<sizeof(double)> x8;
                    sld<sizeof(long double)> x9;
                }
            channel:    stdout
            match_expr: '(?:.*?(?P<size_name>si|sl|sll|ss|sw|sp|sf|sd|sld)=(?P<size_value>\d+))+'

        macros:
            definitions:
                - ['_INTEGRAL_MAX_BITS', '64']
                - ['_WIN32', '1']
                - ['_MSC_FULL_VER', '180000000']
                - ['_MSC_VER', '1800']
                - ['_MSC_EXTENSIONS', '1']
                - ['_M_IX86', '600']
                - ['__FUNCTION__', '"func"']
                - ['__FUNCDNAME__', '"funcname"']
                - ['__FUNCSIG__', '"funcsig"']
                - ['L__FUNCTION__', 'L"func"']
        c_decls:
            definitions:
                - 'void __assert(_Bool);  /*lint !e793 !e955 !e970 !e1904 !e9141 */'
        cpp_decls:
            definitions:
                - 'void __assert(bool);  /*lint !e793 !e955 !e970 !e1904 !e9141 */'
        base_config:
            extensions:
                - ['-std=c++11', 'Enable C++11 support']
                - ['-$', 'Enable $ as an identifier character']
                - ['+fdm', 'Enable MSVC behavior for commas in variadic macros']
                - ['+fan', 'Enable support for anonymous unions']
                - ['+fdi', 'Search including directory']
                - ['+fsi', 'Search include stack for headers']
                - ['+frc', 'Enable MSVC behavior with regards to handling of commas in macro expansions involving __VA_ARGS__']
                - ['+fbl', 'Search dependent base classes for unqualified lookup in a class template']
                - ['+fei', 'Enumerations are always int']
                - ['+fur', 'Allow unions to contain reference members']
                - ['+frd', 'Allow redefinition of default parameters for member functions of a class template']
                - ['+fum', 'A user-declared move operation will only delete the corresponding copy operation']
                - ['+ffv', 'Implicit conversion from function pointers to void pointers']
                - ['+flp', 'Support the C++98 definition of null pointer constant']
                - ['+fnf', 'Fall back on operator new when operator new[] cannot be found']
                - ['+fes', 'Search enclosing scopes for friend tag declarations']
                - ['+ffw', 'A friend declaration may act as a forward declaration']
                - ['+fma', 'Microsoft Asm blocks']
                - ['+fdt', 'Enable delayed template parsing']
                - ['+fms', 'Other Microsoft extensions']
                - ['-fon', 'Disable alternative C++ tokens for logical operators']
                - ['+fwc', 'internal wchar_t']
                - ['+fwu', 'wchar_t is unsigned']
                - ['+fti', '']
                - ['+ppw(using)', 'Enable support for the #using directive']
                - ['+ppw(import)', 'Enable support for the #import directive']
                - ['+rw(___identifier)', '']
                - ['+rw(__alignof)', '']
                - ['+rw(__asm)', '']
                - ['+rw(__builtin_alignof)', '']
                - ['+rw(__cdecl)', '']
                - ['+rw(__declspec)', '']
                - ['+rw(__fastcall)', '']
                - ['+rw(__finally)', '']
                - ['+rw(__forceinline)', '']
                - ['+rw(__gc)', '']
                - ['+rw(__if_exists)', '']
                - ['+rw(__if_not_exists)', '']
                - ['+rw(__inline)', '']
                - ['+rw(__int16)', '']
                - ['+rw(__int32)', '']
                - ['+rw(__int64)', '']
                - ['+rw(__int8)', '']
                - ['+rw(__interface)', '']
                - ['+rw(__is_destructible)', '']
                - ['+rw(__is_interface_class)', '']
                - ['+rw(__is_nothrow_destructible)', '']
                - ['+rw(__is_sealed)', '']
                - ['+rw(__leave)', '']
                - ['+rw(__multiple_inheritance)', '']
                - ['+rw(__nogc)', '']
                - ['+rw(__pin)', '']
                - ['+rw(__ptr64)', '']
                - ['+rw(__ptr32)', '']
                - ['+rw(__single_inheritance)', '']
                - ['+rw(__sptr)', '']
                - ['+rw(__stdcall)', '']
                - ['+rw(__super)', '']
                - ['+rw(__thiscall)', '']
                - ['+rw(__try)', '']
                - ['+rw(__try_cast)', '']
                - ['+rw(__uptr)', '']
                - ['+rw(__unaligned)', '']
                - ['+rw(__uuidof)', '']
                - ['+rw(__value)', '']
                - ['+rw(__vectorcall)', '']
                - ['+rw(__virtual_inheritance)', '']
                - ['+rw(__w64)', '']
                - ['+rw(__wchar_t)', '']
                - ['+rw(_asm)', '']
                - ['+rw(_alignof)', '']
                - ['+rw(_cdecl)', '']
                - ['+rw(_declspec)', '']
                - ['+rw(_fastcall)', '']
                - ['+rw(_inline)', '']
                - ['+rw(_int16)', '']
                - ['+rw(_int32)', '']
                - ['+rw(_int64)', '']
                - ['+rw(_int8)', '']
                - ['+rw(_stdcall)', '']
                - ['+rw(_thiscall)', '']
                - ['+rw(_uuidof)', '']
                - ['++doffsetof(s,m)=__builtin_offsetof(s,m)', '']
            suppressions:
                - ['-emacro(505 792 1773,va_start)', '']
                - ['-esym(4242,std::_Const_cast)', '']
                - ['-estring(9022,_identifier)', '']
                - ['-estring(9051 9052,_inline,_declspec,_stdcall)', '']
                - ['-emacro(413, offsetof)', '']
                - ['-e4374', 'Visual Studio allows certain calling convention differences in overridden functions']

    vs2010:
        <<: *vs_base
        description: "Visual Studio 2010"

    vs2008:
        <<: *vs_base
        description: "Visual Studio 2008"

    vs2005:
        <<: *vs_base
        description: "Visual Studio 2005"

    iar-8051:
        description: "IAR compiler for the 8051 microcontroller family"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+rw(__task)', '']
                - ['+rw(__no_init)', '']
                - ['+rw(__intrinsic)', '']
                - ['+rw(__interrupt)', '']
                - ['+rw(__monitor)', '']
                - ['+rw(__banked_func)', '']
                - ['+rw(__banked_func_ext2)', '']
                - ['+rw(__bdata)', '']
                - ['+rw(__bit)', '']
                - ['+rw(__code)', '']
                - ['+rw(__data)', '']
                - ['+rw(__data_overlay)', '']
                - ['+rw(__ext_stack_reentrant)', '']
                - ['+rw(__far)', '']
                - ['+rw(__far_code)', '']
                - ['+rw(__far_func)', '']
                - ['+rw(__far_rom)', '']
                - ['+rw(__far22)', '']
                - ['+rw(__far22_code)', '']
                - ['+rw(__far22_rom)', '']
                - ['+rw(__generic)', '']
                - ['+rw(__huge)', '']
                - ['+rw(__huge_code)', '']
                - ['+rw(__huge_rom)', '']
                - ['+rw(__idata)', '']
                - ['+rw(__idata_overlay)', '']
                - ['+rw(__idata_reentrant)', '']
                - ['+rw(__ixdata)', '']
                - ['+rw(__near_func)', '']
                - ['+rw(__overlay_near_func)', '']
                - ['+rw(__pdata)', '']
                - ['+rw(__pdata_reentrant)', '']
                - ['+rw(__root)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__xdata)', '']
                - ['+rw(__xdata_reentrant)', '']
                - ['+rw(__xdata_rom)', '']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si2 -sl4 -sll4 -sp4 -sf4 -sd4 -sld4 -as1 -ai1 -al1 -all1 -ap1 -af1 -ad1 -ald1'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-arm:
        description: "IAR compiler for Arm Cores"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__task)', '']
                - ['+rw(__no_init)', '']
                - ['+rw(__intrinsic)', '']
                - ['+rw(__interrupt)', '']
                - ['+rw(__monitor)', '']
                - ['+rw(__banked_func)', '']
                - ['+rw(__banked_func_ext2)', '']
                - ['+rw(__bdata)', '']
                - ['+rw(__bit)', '']
                - ['+rw(__code)', '']
                - ['+rw(__data)', '']
                - ['+rw(__data_overlay)', '']
                - ['+rw(__ext_stack_reentrant)', '']
                - ['+rw(__far)', '']
                - ['+rw(__far_code)', '']
                - ['+rw(__far_func)', '']
                - ['+rw(__far_rom)', '']
                - ['+rw(__far22)', '']
                - ['+rw(__far22_code)', '']
                - ['+rw(__far22_rom)', '']
                - ['+rw(__generic)', '']
                - ['+rw(__huge)', '']
                - ['+rw(__huge_code)', '']
                - ['+rw(__huge_rom)', '']
                - ['+rw(__idata)', '']
                - ['+rw(__idata_overlay)', '']
                - ['+rw(__idata_reentrant)', '']
                - ['+rw(__ixdata)', '']
                - ['+rw(__near_func)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__overlay_near_func)', '']
                - ['+rw(__pdata)', '']
                - ['+rw(__pdata_reentrant)', '']
                - ['+rw(__root)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['+rw(__xdata)', '']
                - ['+rw(__xdata_reentrant)', '']
                - ['+rw(__xdata_rom)', '']
                - ['+rw(_to_semi)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si4 -sl4 -sll8 -sp4 -sf4 -sd8 -sld8 -as2 -ai4 -al4 -all8 -ap4 -af4 -ad8 -ald8'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-430:
        description: "IAR compiler for Texas Instruments MSP430 and MSP430X"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__cc_rom)','']
                - ['+rw(__cc_version1)','']
                - ['+rw(__cc_version2)','']
                - ['+rw(__data16)','']
                - ['+rw(__data20)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__monitor)','']
                - ['+rw(__no_alloc)','']
                - ['+rw(__no_alloc16)','']
                - ['+rw(__no_alloc_str)','']
                - ['+rw(__no_alloc_str16)','']
                - ['+rw(__no_init)','']
                - ['+rw(__no_multiplier)','']
                - ['+rw(__no_pic)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__persistent)','']
                - ['+rw(__ramfunc)','']
                - ['+rw(__raw)','']
                - ['+rw(__regvar)','']
                - ['+rw(__root)','']
                - ['+rw(__ro_placement)','']
                - ['+rw(__save_reg20)','']
                - ['+rw(__task)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si2 -sl4 -sll8 -sp4 -sf4 -sd4 -sld4 -as2 -ai2 -al2 -all2 -ap2 -af2 -ad2 -ald2'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]
    iar-sam8:
        description: "IAR compiler for Samsung SAM8"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__bank0)','']
                - ['+rw(__bank1)','']
                - ['+rw(__code)','']
                - ['+rw(__fast)','']
                - ['+rw(__generic)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__monitor)','']
                - ['+rw(__near)','']
                - ['+rw(__no_init)','']
                - ['+rw(__root)','']
                - ['+rw(__tiny)','']
                - ['+rw(__tiny_func)','']
                - ['+rw(__tiny2)','']
                - ['+rw(__tinyp)','']
                - ['+rw(__tiny2p)','']
                - ['+rw(__tinyp1)','']
                - ['+rw(__tinyp2)','']
                - ['+rw(__tinyp3)','']
                - ['+rw(__tinyp4)','']
                - ['+rw(__tinyp5)','']
                - ['+rw(__tinyp6)','']
                - ['+rw(__tinyp7)','']
                - ['+rw(__tinyp8)','']
                - ['+rw(__tinyp9)','']
                - ['+rw(__tinyp10)','']
                - ['+rw(__tinyp11)','']
                - ['+rw(__tinyp12)','']
                - ['+rw(__tinyp13)','']
                - ['+rw(__tinyp14)','']
                - ['+rw(__tinyp15)','']
                - ['+rw(__tiny2p1)','']
                - ['+rw(__tiny2p2)','']
                - ['+rw(__tiny2p3)','']
                - ['+rw(__tiny2p4)','']
                - ['+rw(__tiny2p5)','']
                - ['+rw(__tiny2p6)','']
                - ['+rw(__tiny2p7)','']
                - ['+rw(__tiny2p8)','']
                - ['+rw(__tiny2p9)','']
                - ['+rw(__tiny2p10)','']
                - ['+rw(__tiny2p11)','']
                - ['+rw(__tiny2p12)','']
                - ['+rw(__tiny2p13)','']
                - ['+rw(__tiny2p14)','']
                - ['+rw(__tiny2p15)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si2 -sl4 -sll4 -sp4 -sf4 -sd4 -sld4 -as2 -ai2 -al2 -all2 -ap2 -af2 -ad2 -ald2'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-v850:
        description: "IAR compiler for Renesas V850"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__brel)','']
                - ['+rw(__brel23)','']
                - ['+rw(__callt)','']
                - ['+rw(__flat)','']
                - ['+rw(__huge)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__monitor)','']
                - ['+rw(__near)','']
                - ['+rw(__no_bit_access)','']
                - ['+rw(__no_init)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__root)','']
                - ['+rw(__saddr)','']
                - ['+rw(__syscall)','']
                - ['+rw(__task)','']
                - ['+rw(__trap)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si4 -sl4 -sll8 -sp4 -sf4 -sd8 -sld8 -as2 -ai4 -al4 -all4 -ap4 -af4 -ad4 -ald4'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-rx:
        description: "IAR compiler for Renesas RX"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__data16)','']
                - ['+rw(__data24)','']
                - ['+rw(__data32)','']
                - ['+rw(__fast_interrupt)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__monitor)','']
                - ['+rw(__nested)','']
                - ['+rw(__no_alloc,)','']
                - ['+rw(__no_alloc16)','']
                - ['+rw(__no_alloc_str,)','']
                - ['+rw(__no_alloc_str16)','']
                - ['+rw(__no_init)','']
                - ['+rw(__no_scratch)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__packed)','']
                - ['+rw(__ramfunc)','']
                - ['+rw(__root)','']
                - ['+rw(__ro_placement)','']
                - ['+rw(__sbrel)','']
                - ['+rw(__sfr)','']
                - ['+rw(__task)','']
                - ['+rw(__weak)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si4 -sl4 -sll8 -sp4 -sf4 -sd4 -sld4 -as2 -ai4 -al4 -all4 -ap4 -af4 -ad4 -ald4'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-rh850:
        description: "IAR compiler for Renesas RH850"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__brel)','']
                - ['+rw(__brel23)','']
                - ['+rw(__callt)','']
                - ['+rw(__cc_version1)','']
                - ['+rw(__code)','']
                - ['+rw(__db_int)','']
                - ['+rw(__ei_int)','']
                - ['+rw(__fe_int)','']
                - ['+rw(__fetrap)','']
                - ['+rw(__flat)','']
                - ['+rw(__huge)','']
                - ['+rw(__hvcall)','']
                - ['+rw(__hvtrap)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__monitor)','']
                - ['+rw(__near)','']
                - ['+rw(__no_bit_access)','']
                - ['+rw(__no_alloc,)','']
                - ['+rw(__no_alloc16)','']
                - ['+rw(__no_alloc_str,)','']
                - ['+rw(__no_alloc_str16)','']
                - ['+rw(__no_init)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__root)','']
                - ['+rw(__saddr)','']
                - ['+rw(__syscall)','']
                - ['+rw(__task)','']
                - ['+rw(__trap)','']
                - ['+rw(__weak)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si4 -sl4 -sll8 -sp4 -sf4 -sd8 -sld8 -as2 -ai4 -al4 -all4 -ap4 -af4 -ad4 -ald4'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-r32c:
        description: "IAR compiler for Renesas R32C/100 microcomputer"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__code24)','']
                - ['+rw(__code32)','']
                - ['+rw(__data16)','']
                - ['+rw(__data24)','']
                - ['+rw(__data32)','']
                - ['+rw(__fast_interrupt)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__monitor)','']
                - ['+rw(__no_init)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__packed)','']
                - ['+rw(__root)','']
                - ['+rw(__sbdata16)','']
                - ['+rw(__sbdata24)','']
                - ['+rw(__task)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si4 -sl4 -sll8 -sp4 -sf4 -sd4 -sld4 -as2 -ai4 -al4 -all8 -ap4 -af4 -ad4 -ald4'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-m32c:
        description: "IAR compiler for M32C and M16C/8x Series"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__far)','']
                - ['+rw(__huge)','']
                - ['+rw(__no_init)','']
                - ['+rw(__sbdata)','']
                - ['+rw(__sbdata16)','']
                - ['+rw(__bitvar)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__fast_interrupt)','']
                - ['+rw(__regbank_interrupt)','']
                - ['+rw(__tiny_func)','']
                - ['+rw(__monitor)','']
                - ['+rw(__c_task)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si2 -sl4 -sll4 -sp4 -sf4 -sd4 -sld4 -as2 -ai2 -al2 -all2 -ap2 -af2 -ad2 -ald2'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-m16c:
        description: "IAR compiler for Renesas M16C/1X-3X, 5X-6X and R8C Series"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__bitvar)','']
                - ['+rw(__data13)','']
                - ['+rw(__data16)','']
                - ['+rw(__data20)','']
                - ['+rw(__far)','']
                - ['+rw(__huge)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__monitor)','']
                - ['+rw(__near)','']
                - ['+rw(__no_init)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__regbank_interrupt)','']
                - ['+rw(__root)','']
                - ['+rw(__simple)','']
                - ['+rw(__task)','']
                - ['+rw(__tiny_func)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si2 -sl4 -sll8 -sp4 -sf4 -sd4 -sld4 -as2 -ai2 -al2 -all2 -ap2 -af2 -ad2 -ald2'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-h8:
        description: "IAR compiler for Renesas H8/300H and H8S"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__cc_version1)','']
                - ['+rw(__cc_version2)','']
                - ['+rw(__cc_version3)','']
                - ['+rw(__code16)','']
                - ['+rw(__code24)','']
                - ['+rw(__data8)','']
                - ['+rw(__data16)','']
                - ['+rw(__data32)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__monitor)','']
                - ['+rw(__no_init)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__raw)','']
                - ['+rw(__root)','']
                - ['+rw(__task)','']
                - ['+rw(__trap)','']
                - ['+rw(__vector_call)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si2 -sl4 -sll8 -sp4 -sf4 -sd4 -sld4 -as2 -ai2 -al2 -all2 -ap2 -af2 -ad2 -ald2'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-78k:
        description: "IAR compiler for Renesas 78K0/78K0S and 78K0R"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__callf)','']
                - ['+rw(__callt)','']
                - ['+rw(__far)','']
                - ['+rw(__far_func)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__monitor)','']
                - ['+rw(__near)','']
                - ['+rw(__near_func)','']
                - ['+rw(__no_bit_access)','']
                - ['+rw(__no_init)','']
                - ['+rw(__non_banked)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__no_save)','']
                - ['+rw(__root)','']
                - ['+rw(__saddr)','']
                - ['+rw(__sfr)','']
                - ['+rw(__V2_call)','']
                - ['+rw(__V3_call)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si2 -sl4 -sll4 -sp4 -sf4 -sd4 -sld4 -as2 -ai2 -al2 -all2 -ap2 -af2 -ad2 -ald2'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-rl78:
        description: "IAR compiler for Renesas RL78"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__far_func)','']
                - ['+rw(__huge)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__monitor)','']
                - ['+rw(__near)','']
                - ['+rw(__near_func)','']
                - ['+rw(__no_alloc,)','']
                - ['+rw(__no_alloc16)','']
                - ['+rw(__no_alloc_str)','']
                - ['+rw(__no_alloc_str16)','']
                - ['+rw(__no_bit_access)','']
                - ['+rw(__no_init)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__no_save)','']
                - ['+rw(__root)','']
                - ['+rw(__ro_placement)','']
                - ['+rw(__saddr)','']
                - ['+rw(__sfr)','']
                - ['+rw(__v1_call)','']
                - ['+rw(__v2_call)','']
                - ['+rw(__weak)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si2 -sl4 -sll8 -sp4 -sf4 -sd4 -sld4 -as2 -ai2 -al2 -all2 -ap2 -af2 -ad2 -ald2'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-cr16c:
        description: "IAR compiler for National Semiconductor CR16C"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__data16)','']
                - ['+rw(__data20)','']
                - ['+rw(__data24)','']
                - ['+rw(__data32)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__ix4)','']
                - ['+rw(__ix20)','']
                - ['+rw(__monitor)','']
                - ['+rw(__near)','']
                - ['+rw(__noadjust)','']
                - ['+rw(__no_init)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__raw)','']
                - ['+rw(__root)','']
                - ['+rw(__sbrel)','']
                - ['+rw(__task)','']
                - ['+rw(__trap)','']
                - ['+rw(__user)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si2 -sl4 -sll4 -sp4 -sf4 -sd8 -sld8 -as2 -ai2 -al2 -all2 -ap2 -af2 -ad2 -ald2'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-maxq:
        description: "IAR compiler for Dallas Semiconductor MAXQ"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__data16)','']
                - ['+rw(__far_func)','']
                - ['+rw(__fastcall)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__io)','']
                - ['+rw(__monitor)','']
                - ['+rw(__near_func)','']
                - ['+rw(__no_init)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__root)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si2 -sl4 -sll4 -sp2 -sf4 -sd4 -sld4 -as2 -ai2 -al2 -all2 -ap2 -af2 -ad2 -ald2'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-s08:
        description: "IAR compiler for Freescale S08"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__data8)','']
                - ['+rw(__data16)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__monitor)','']
                - ['+rw(__no_init)','']
                - ['+rw(__non_banked)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__root)','']
                - ['+rw(__task)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si2 -sl4 -sll4 -sp2 -sf4 -sd4 -sld4 -as1 -ai1 -al1 -all1 -ap1 -af1 -ad1 -ald1'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-hcs12:
        description: "IAR compiler for Freescale HCS12"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__banked)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__monitor)','']
                - ['+rw(__non_banked)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__root)','']
                - ['+rw(__simple)','']
                - ['+rw(__task )','']
                - ['+rw(__data8)','']
                - ['+rw(__data16)','']
                - ['+rw(__no_init)','']
                - ['+rw(__root)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si2 -sl4 -sll8 -sp2 -sf4 -sd4 -sld4 -as1 -ai1 -al1 -all1 -ap1 -af1 -ad1 -ald1'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-cf:
        description: "IAR compiler for Freescale ColdFire"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__far_func)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__monitor)','']
                - ['+rw(__near)','']
                - ['+rw(__near_rel)','']
                - ['+rw(__near_func)','']
                - ['+rw(__no_init)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__root)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si4 -sl4 -sll8 -sp4 -sf4 -sd8 -sld8 -as2 -ai4 -al4 -all4 -ap4 -af4 -ad4 -ald4'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-avr32:
        description: "IAR compiler for Atmel AVR32"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__acall)','']
                - ['+rw(__code21)','']
                - ['+rw(__code32)','']
                - ['+rw(__data17)','']
                - ['+rw(__data21)','']
                - ['+rw(__data32)','']
                - ['+rw(__dbgreg)','']
                - ['+rw(__exception)','']
                - ['+rw(__flashvault)','']
                - ['+rw(__flashvault_impl)','']
                - ['+rw(__imported)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__monitor)','']
                - ['+rw(__nested)','']
                - ['+rw(__no_alloc,)','']
                - ['+rw(__no_alloc16)','']
                - ['+rw(__no_alloc_str,)','']
                - ['+rw(__no_alloc_str16)','']
                - ['+rw(__no_init)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__packed)','']
                - ['+rw(__ramfunc)','']
                - ['+rw(__root)','']
                - ['+rw(__scall)','']
                - ['+rw(__sysreg)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si4 -sl4 -sll8 -sp4 -sf4 -sd4 -sld4 -as2 -ai4 -al4 -all4 -ap4 -af4 -ad4 -ald4'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--variable_enum_size':
                transform: '+fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]

    iar-avr:
        description: "IAR compiler for Atmel AVR"

        macros:
            # When invoked with the options specified below, the compiler should dump a list of
            # #defines that correspond to the builtin macros supported to stdout.  This information
            # will be used to build a macros header.
            command:
                - "-"
                - "--predef_macros"
                - "-"
            input: ""
            channel:    stdout
            match_expr: '(?P<macros>.*)'

        decls:
            definitions:
                - 'void * __segment_begin(char const * segment);'
                - 'void * __segment_end(char const * segment);'
                - 'unsigned * __segment_size(char const * segment);'

        base_config:
            extensions:
                - ['+fdi', 'Search including directory']
                - ['+fcu', 'Char is unsigned']
                - ['+fse', 'Small enums']
                - ['+fan', 'Anonymous unions']
                - ['+fas', 'Anonymous structs']
                - ['+fdi', 'Search directory of including file']
                - ['+rw(__eeprom)','']
                - ['+rw(__ext_io)','']
                - ['+rw(__far)','']
                - ['+rw(__farflash)','']
                - ['+rw(__farfunc)','']
                - ['+rw(__flash)','']
                - ['+rw(__generic)','']
                - ['+rw(__huge)','']
                - ['+rw(__hugeflash)','']
                - ['+rw(__interrupt)','']
                - ['+rw(__intrinsic)','']
                - ['+rw(__io)','']
                - ['+rw(__monitor)','']
                - ['+rw(__near)','']
                - ['+rw(__nearfunc)','']
                - ['+rw(__nested)','']
                - ['+rw(__no_alloc,)','']
                - ['+rw(__no_alloc16)','']
                - ['+rw(__no_alloc_str)','']
                - ['+rw(__no_alloc_str16)','']
                - ['+rw(__no_init)','']
                - ['+rw(__no_runtime_init)','']
                - ['+rw(__noreturn)','']
                - ['+rw(__raw)','']
                - ['+rw(__regvar)','']
                - ['+rw(__root)','']
                - ['+rw(__task)','']
                - ['+rw(__tiny)','']
                - ['+rw(__tinyflash)','']
                - ['+rw(__version_1)','']
                - ['+rw(__version_2)','']
                - ['+rw(__version_4)','']
                - ['+rw(__x)','']
                - ['+rw(__x_z)','']
                - ['+rw(__z)','']
                - ['+rw(__z_x)','']
                - ['+rw(_to_semi)', '']
                - ['+rw(__nounwind)', '']
                - ['+rw(__sfr)', '']
                - ['+rw(__spec_string)', '']
                - ['+rw(__sys_reg)', '']
                - ['-dasm=_to_semi', '']
                - ['-d__constrange(...)=', '']
                - ['-d__ALIGNOF__=__alignof__', '']
                - ['+rw(static_assert)', '']
                - ['+frc', 'remove commas before empty __VA_ARGS__']
            suppressions:
                - ['-e430', 'use of @ is non-standard']

        size_options:
            # To obtain the size of the fundamental types, the compiler is invoked with the arguments
            # provided below and the source file below is fed to the compiler via stdin.  The output
            # from the compiler will be the preprocessed source which will contain the desired size
            # options which will be extracted from the output via the regular expression 'match_expr'.
            command:
                - "--preprocess"
                - "-"
                - "-"
            input: |

                #define STR1(p) #p
                #define STR(p) STR1(p)
                #define JOIN1(a,b) a##b
                #define JOIN(a,b) JOIN1(a,b)

                #pragma message(STR( \
                                      JOIN(-si, __INT_SIZE__) \
                                      JOIN(-sl, __LONG_SIZE__) \
                                      JOIN(-sll,__LONG_LONG_SIZE__) \
                                      JOIN(-ss, __SHORT_SIZE__) \
                                      JOIN(-sw, __WCHAR_T_SIZE__) \
                                      JOIN(-sf, __FLOAT_SIZE__) \
                                      JOIN(-sd, __DOUBLE_SIZE__) \
                                      JOIN(-sld,__LONG_DOUBLE_SIZE__) \
                                      JOIN(-ai, __INT_ALIGN__) \
                                      JOIN(-al, __LONG_ALIGN__) \
                                      JOIN(-all,__LONG_LONG_ALIGN__) \
                                      JOIN(-as, __SHORT_ALIGN__) \
                                      JOIN(-af, __FLOAT_ALIGN__) \
                                      JOIN(-ad, __DOUBLE_ALIGN__) \
                                      JOIN(-ald,__LONG_DOUBLE_ALIGN__) \
                                    ) )

            channel:    stdout
            match_expr: 'message\("(?P<size_options>.+?)"'
            fallback_values: '-ss2 -si2 -sl4 -sll8 -sp4 -sf4 -sd4 -sld4 -as1 -ai1 -al1 -all1 -ap1 -af1 -ad1 -ald1'

        include_paths:
            # When invoked with the arguments provided below, the compiler will emit, among
            # other information, the list of directories searched for #includes.  The regular
            # expression will capture these directory names in a the named capture 'include_dir'.
            command:
                - "-"
            channel:    stderr
            input: '#include <somefilethatdoesntexist>'
            match_expr: '(searched:\s*["](?P<include_dir>.+?)["]\s*)+'

        options:
            '--char_is_unsigned':
                transform: '+fcu'
            '--char_is_signed':
                transform: '-fcu'
            '--enum_is_int':
                transform: '-fse'
            '-D':
                transforms: [ ['-D\s*(?P<macro_name>[^=#]+)[=#](?P<macro_def>.*)', '-d\g<macro_name>{"\g<macro_def>"}'], ['-D\s*(?P<macro_name>[A-Z0-9_]+$)', '-d\g<macro_name>'] ]
            '-I':
                transforms: [ ['-I\s*(?P<dir>.+)$', '-i"\g<dir>"'] ]
            '--preinclude':
                transforms: [ ['--preinclude[= ](?P<file>.+)$', '-header(\g<file>)'] ]
